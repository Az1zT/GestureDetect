/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 05.04.2024 21:59:28

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#elif defined __ICCARM__
#define ALIGN(x) __attribute__((aligned(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1536;
#else
constexpr int kTensorArenaSize = 512;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,27 } };
const ALIGN(16) float tensor_data1[10] = { 0.011868425644934177, 0, 0, 0, 0, 0, 0.010638320818543434, -0.021005796268582344, -0.016579575836658478, -0.011539190076291561, };
const TfArray<1, int> tensor_dimension1 = { 1, { 10 } };
const ALIGN(16) float tensor_data2[20] = { 0, -0.021422130987048149, -0.014485773630440235, 0, -0.001592799206264317, 0, 0.0091616790741682053, -0.014545598067343235, -0.026553312316536903, 0, -0.011155358515679836, -0.039843235164880753, -0.010989142581820488, 0, 0.0078826276585459709, -0.015233480371534824, 0, -0.019971078261733055, 0, 0.011456693522632122, };
const TfArray<1, int> tensor_dimension2 = { 1, { 20 } };
const ALIGN(8) float tensor_data3[3] = { 0.015792772173881531, 0.014983465895056725, -0.013975040055811405, };
const TfArray<1, int> tensor_dimension3 = { 1, { 3 } };
const ALIGN(16) float tensor_data4[20*27] = { 
  -0.0014781355857849121, -0.049341768026351929, -0.07801172137260437, 0.29132229089736938, 0.099785953760147095, 0.17106091976165771, 0.10089045763015747, -0.22601525485515594, 0.11677011847496033, -0.28159773349761963, -0.011041432619094849, 0.12579995393753052, -0.31132891774177551, -0.22876335680484772, -0.07654157280921936, 0.30994093418121338, 0.087568461894989014, 0.25469005107879639, -0.1704556792974472, -0.16947732865810394, 0.30276691913604736, -0.091440379619598389, 0.29281473159790039, 0.062110364437103271, -0.32297235727310181, 0.22352504730224609, -0.1715342253446579, 
  -0.31923696398735046, -0.086057104170322418, 0.40734812617301941, -0.073264375329017639, -0.39081329107284546, 0.040556963533163071, 0.097552940249443054, 0.092573612928390503, 0.14049080014228821, 0.29947268962860107, -0.33059027791023254, 0.3145051896572113, 0.0023248179350048304, -0.004145429003983736, 0.20279784500598907, -0.21121887862682343, 0.25004732608795166, 0.14824168384075165, 0.34799295663833618, -0.29295822978019714, 0.080325469374656677, -0.079986564815044403, 0.22623245418071747, -0.076560311019420624, 0.15496975183486938, 0.1479247510433197, -0.079212494194507599, 
  0.26285982131958008, -0.11999991536140442, -0.16813006997108459, -0.36453890800476074, -0.13892017304897308, -0.19640292227268219, 0.21055363118648529, 0.29040318727493286, 0.33021268248558044, -0.046598292887210846, -0.38367697596549988, 0.24044443666934967, -0.28891408443450928, 0.12218156456947327, -0.21064843237400055, 0.23012040555477142, 0.097737438976764679, 0.18864834308624268, 0.0045757521875202656, 0.056192498654127121, 0.50475031137466431, -0.36511266231536865, 0.14497694373130798, -0.27920299768447876, 0.026166535913944244, -0.10501600801944733, 0.32824653387069702, 
  -0.2923983633518219, 0.18467521667480469, -0.18695232272148132, 0.2091066837310791, -0.029173463582992554, 0.20507973432540894, -0.034493386745452881, 0.34116566181182861, 0.17477339506149292, -0.29830625653266907, 0.28661805391311646, 0.28203493356704712, 0.17084437608718872, 0.21742928028106689, 0.1511722207069397, -0.0787811279296875, -0.26925235986709595, -0.17104500532150269, 0.11706170439720154, 0.2221982479095459, -0.23087646067142487, 0.14359909296035767, -0.22768872976303101, -0.13196255266666412, 0.21304982900619507, 0.17917907238006592, -0.25251355767250061, 
  0.24946771562099457, 0.15142346918582916, -0.071896791458129883, -0.16210258007049561, -0.10689521580934525, -0.27125602960586548, 0.2874678373336792, -0.092432416975498199, -0.17328748106956482, 0.1968093067407608, 0.011913545429706573, -0.11134614050388336, -0.21750760078430176, -0.16061338782310486, -0.25412192940711975, 0.18768841028213501, 0.20223227143287659, 0.23074814677238464, -0.050070326775312424, 0.0078095626085996628, -0.18660347163677216, 0.32460838556289673, -0.09278590977191925, -0.06645704060792923, -0.1139998733997345, 0.011730910278856754, 0.2451326996088028, 
  -0.10551869869232178, 0.26481139659881592, 0.062560379505157471, -0.015331804752349854, -0.11939434707164764, -0.27999404072761536, 0.034236401319503784, 0.3521386981010437, -0.13718673586845398, 0.076991438865661621, -0.32952067255973816, -0.12748903036117554, -0.34866335988044739, 0.16434711217880249, 0.06176602840423584, -0.0059646070003509521, -0.3191656768321991, 0.10087591409683228, -0.10888013243675232, 0.029875725507736206, -0.27506920695304871, -0.29191884398460388, -0.033847451210021973, -0.17652823030948639, 0.25847393274307251, -0.092000901699066162, 0.096349209547042847, 
  0.13223062455654144, -0.021511843428015709, -0.26458597183227539, -0.084234870970249176, 0.067276515066623688, -0.34009495377540588, -0.11560527235269547, 0.25181481242179871, -0.12283331155776978, 0.040148526430130005, 0.10781338810920715, -0.21300522983074188, 0.030012687668204308, 0.24817666411399841, 0.13908684253692627, -0.04612412303686142, -0.13099566102027893, -0.16639894247055054, 0.34144490957260132, 0.37209430336952209, -0.32501721382141113, 0.09801008552312851, -0.11430352926254272, 0.22569465637207031, -0.12906023859977722, -0.023861339315772057, 0.35770803689956665, 
  0.279205322265625, -0.41102662682533264, 0.21088173985481262, 0.22501580417156219, 0.12013687938451767, 0.090219944715499878, 0.086935564875602722, 0.13347235321998596, -0.12379886955022812, 0.29335182905197144, -0.17285913228988647, 0.49206539988517761, -0.13724826276302338, 0.147297203540802, -0.23794668912887573, -0.35471096634864807, -0.13272328674793243, -0.20537318289279938, -0.2348330169916153, 0.2565670907497406, 0.41585403680801392, -0.23758754134178162, -0.16787643730640411, -0.015014225617051125, -0.096060365438461304, 0.32471674680709839, -0.10558751970529556, 
  0.15396934747695923, 0.33588668704032898, 0.22066786885261536, -0.031218161806464195, -0.18046973645687103, 0.19698792695999146, -0.070777729153633118, -0.239736407995224, -0.059589378535747528, -0.036995969712734222, 0.028052652254700661, 0.23005193471908569, 0.23249338567256927, 0.0085924286395311356, 0.033875342458486557, -0.17305782437324524, 0.1259675920009613, -0.18289518356323242, 0.35068768262863159, 0.094723574817180634, 0.3234289288520813, 0.28577211499214172, 0.51032304763793945, 0.11405196785926819, 0.19445420801639557, 0.20714700222015381, 0.23840141296386719, 
  -0.29613816738128662, 0.15901106595993042, -0.30096250772476196, -0.023011386394500732, -0.20588468015193939, 0.21041792631149292, -0.3230145275592804, -0.002164989709854126, -0.194069504737854, -0.35685557126998901, -0.30271589756011963, -0.24335771799087524, -0.35572251677513123, -0.092055678367614746, -0.22631588578224182, 0.27729153633117676, -0.038499683141708374, 0.20729619264602661, 0.24986207485198975, -0.22614628076553345, -0.073736429214477539, 0.22397053241729736, 0.069172769784927368, 0.33051919937133789, 0.35601776838302612, 0.23913222551345825, 0.018812507390975952, 
  0.38357838988304138, 0.057872772216796875, 0.23423740267753601, -0.51716381311416626, -0.73937273025512695, -0.1582825779914856, 0.2066643089056015, 0.059292744845151901, -0.020493315532803535, 0.057711169123649597, -0.32809042930603027, 0.18507355451583862, 0.033493347465991974, -0.4438011646270752, 0.16282929480075836, -0.22335158288478851, -0.029093526303768158, -0.03015325590968132, 0.097057461738586426, 0.008325221948325634, -0.22178702056407928, 0.064221799373626709, -0.5950160026550293, 0.2844521701335907, 0.2747003436088562, -0.08838973194360733, -0.19189739227294922, 
  -0.1482551246881485, 0.20622465014457703, 0.17057505249977112, 0.033945247530937195, 0.17850509285926819, -0.35064029693603516, 0.29909062385559082, -0.1936473548412323, 0.2066083550453186, -0.074521094560623169, 0.42812970280647278, 0.17586281895637512, 0.23274321854114532, 0.4352191686630249, -0.1782897412776947, 0.12740825116634369, -0.17453838884830475, -0.14757592976093292, 0.29396489262580872, 0.14145085215568542, -0.22810943424701691, -0.026700163260102272, 0.55560016632080078, -0.048097461462020874, 0.0756329745054245, 0.11459387093782425, 0.19502817094326019, 
  -0.13070663809776306, -0.34598472714424133, 0.043551754206418991, -0.25580683350563049, -0.15192338824272156, -0.32109200954437256, -0.21396341919898987, -0.34536141157150269, -0.28795161843299866, 0.10756517946720123, -0.1215641051530838, -0.27546244859695435, 0.016122050583362579, 0.00080952735152095556, -0.13127925992012024, 0.24387115240097046, 0.024121444672346115, -0.14406760036945343, 0.26139408349990845, -0.14448310434818268, 0.22033354640007019, 0.096114858984947205, -0.49653857946395874, 0.22331598401069641, 0.16174860298633575, -0.13482791185379028, 0.0026275052223354578, 
  0.08378484845161438, -0.35577747225761414, -0.19366589188575745, -0.01937633752822876, 0.31640422344207764, 0.34329020977020264, -0.29899165034294128, 0.32986390590667725, -0.048838168382644653, 0.083543181419372559, 0.066907942295074463, 0.093649595975875854, 0.3127862811088562, 0.094954460859298706, -0.068139046430587769, -0.25213652849197388, -0.35617008805274963, -0.057732164859771729, -0.28736966848373413, -0.13186894357204437, -0.27170997858047485, -0.28054365515708923, -0.018398851156234741, -0.11559991538524628, -0.1517859548330307, -0.35507288575172424, -0.23931011557579041, 
  0.27934977412223816, -0.22096459567546844, -0.33241575956344604, 0.17862598598003387, 0.31595650315284729, -0.20709024369716644, -0.16043968498706818, 0.11885993927717209, 0.16618691384792328, 0.12794701755046844, 0.46433752775192261, -0.54036593437194824, -0.27528896927833557, 0.39514383673667908, -0.34978300333023071, -0.12878315150737762, -0.30392301082611084, 0.057915963232517242, 0.19324129819869995, -0.18053282797336578, 0.13758106529712677, 0.3752327561378479, -0.12684749066829681, 0.25099697709083557, -0.32330942153930664, -0.20147053897380829, -0.049899987876415253, 
  0.033384818583726883, 0.2273867279291153, -0.13199892640113831, -0.44813725352287292, -0.62242341041564941, 0.084593169391155243, -0.049869176000356674, 0.051159914582967758, 0.12109854817390442, 0.10019756108522415, -0.13706159591674805, 0.31638595461845398, -0.23165726661682129, 0.11400125175714493, 0.16084747016429901, 0.25859630107879639, 0.040770117193460464, 0.13710927963256836, 0.12306860089302063, 0.11711424589157104, -0.17285443842411041, 0.25958481431007385, -0.34092223644256592, 0.15233057737350464, 0.063335850834846497, -0.013938786461949348, -0.16758246719837189, 
  0.0047572851181030273, -0.2278154045343399, -0.14088696241378784, -0.025660842657089233, 0.28719043731689453, -0.084683388471603394, -0.11926494538784027, -0.25638201832771301, 0.12895184755325317, -0.31219297647476196, -0.30975484848022461, -0.11193650960922241, 0.082228928804397583, 0.1727297306060791, -0.12307198345661163, 0.1292816698551178, -0.27996492385864258, -0.17664603888988495, 0.15405493974685669, -0.11484269797801971, -0.29771795868873596, -0.20461864769458771, 0.13396400213241577, -0.15127459168434143, 0.1471218466758728, -0.11673764884471893, -0.062984347343444824, 
  -0.05064743384718895, 0.11581189185380936, 0.42469167709350586, 0.16567003726959229, 0.056548718363046646, -0.1253315657377243, -0.15207232534885406, 0.28172576427459717, 0.10711675137281418, -0.055907774716615677, -0.21957801282405853, 0.49882116913795471, -0.14748752117156982, 0.24215780198574066, -0.26536375284194946, -0.13801582157611847, -0.26762920618057251, 0.071191534399986267, 0.32521745562553406, -0.26207214593887329, 0.31480294466018677, -0.17072048783302307, -0.25809907913208008, 0.33697444200515747, -0.21195200085639954, -0.2934613823890686, -0.19135153293609619, 
  -0.29871326684951782, -0.090853124856948853, 0.18863821029663086, -0.34651529788970947, 0.17130875587463379, 0.030039548873901367, -0.23103627562522888, -0.033494442701339722, -0.010085314512252808, -0.12483072280883789, -0.32802832126617432, -0.13588058948516846, -0.30337232351303101, -0.25126132369041443, -0.26494741439819336, -0.18521402776241302, 0.022466212511062622, -0.2098395973443985, -0.19417683780193329, 0.13605087995529175, -0.17657704651355743, 0.29408854246139526, -0.19335088133811951, 0.27909624576568604, -0.15398401021957397, -0.30942410230636597, -0.014012724161148071, 
  -0.071178652346134186, 0.34110262989997864, -0.13376960158348083, 0.025386936962604523, 0.4586322009563446, -0.10303893685340881, 0.10274552553892136, -0.05106242373585701, 0.25266239047050476, 0.28368064761161804, -0.16254241764545441, 0.10158753395080566, 0.29353791475296021, 0.12343296408653259, -0.0052829384803771973, -0.12912279367446899, 0.011720091104507446, -0.27127349376678467, -0.17696820199489594, 0.21277952194213867, -0.29721635580062866, -0.24267509579658508, 0.48062905669212341, -0.28995400667190552, -0.0054914853535592556, 0.031842935830354691, -0.21358631551265717, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,27 } };
const ALIGN(16) float tensor_data5[10*20] = { 
  0.155190110206604, -0.2807232141494751, -0.2789435088634491, 0.049101203680038452, 0.36450564861297607, 0.05985337495803833, 0.4211820662021637, -0.40970706939697266, -0.033558141440153122, -0.19483354687690735, 0.073575258255004883, 0.065873272716999054, 0.24601005017757416, 0.43536907434463501, 0.19267769157886505, -0.31557267904281616, 0.00019213557243347168, -0.10021647810935974, -0.26989120244979858, 0.10544605553150177, 
  -0.21513541042804718, -0.43652644753456116, 0.25989925861358643, 0.25670373439788818, 0.20556908845901489, -0.15646842122077942, -0.19914223253726959, -0.36983609199523926, -0.35554879903793335, 0.069873809814453125, -0.20073221623897552, -0.2023371160030365, 0.2409820556640625, 0.084498703479766846, 0.26755255460739136, 0.3430597186088562, -0.19190970063209534, 0.13136303424835205, -0.1693665087223053, -0.11774033308029175, 
  -0.086540102958679199, -0.36983108520507812, -0.011426568031311035, 0.40303337574005127, -0.18503651022911072, -0.22609998285770416, -0.13627669215202332, 0.078819572925567627, -0.15676471590995789, -0.043710947036743164, 0.12338340282440186, 0.19389015436172485, -0.081969767808914185, -0.33017858862876892, -0.050489902496337891, -0.26666605472564697, 0.32243669033050537, -0.3727266788482666, -0.38322222232818604, -0.30915829539299011, 
  0.22499942779541016, 0.051235824823379517, 0.35992997884750366, 0.013337910175323486, -0.25352272391319275, 0.29372084140777588, -0.22272127866744995, -0.17520973086357117, -0.10726484656333923, 0.28100210428237915, 0.38198834657669067, 0.18503981828689575, -0.28030186891555786, -0.35961630940437317, -0.016391962766647339, -0.17162406444549561, -0.10153305530548096, -0.20571751892566681, 0.40465575456619263, 0.32163810729980469, 
  -0.17334240674972534, 0.22864800691604614, -0.36935180425643921, -0.16372278332710266, -0.32421711087226868, 0.26705628633499146, -0.13781583309173584, 0.10276287794113159, -0.35277539491653442, 0.23458927869796753, 0.34554034471511841, 0.21861153841018677, -0.077009856700897217, 0.18902230262756348, 0.094670414924621582, -0.36372420191764832, -0.18604752421379089, 0.38466089963912964, 0.27800458669662476, 0.22064423561096191, 
  -0.33576247096061707, 0.26865863800048828, -0.2659904956817627, 0.19467127323150635, -0.11647129058837891, -0.44642287492752075, -0.025772631168365479, 0.29864662885665894, -0.44512087106704712, -0.17979496717453003, 0.29691082239151001, 0.22912448644638062, -0.19458532333374023, 0.23980724811553955, -0.091879725456237793, -0.25903475284576416, -0.14094427227973938, 0.23669981956481934, -0.25955837965011597, 0.015761494636535645, 
  0.35197710990905762, 0.21415822207927704, -0.26144307851791382, -0.30041342973709106, 0.28748637437820435, 0.30070459842681885, 0.029051298275589943, -0.1408994048833847, -0.11651808768510818, 0.0096309185028076172, 0.21810044348239899, 0.15339586138725281, -0.25833052396774292, -0.1570727527141571, 0.016786983236670494, -0.064084619283676147, 0.22909986972808838, -0.065311811864376068, -0.061746180057525635, -0.033710312098264694, 
  -0.057526230812072754, 0.34143775701522827, 0.17459186911582947, 0.23511844873428345, -0.039347853511571884, 0.329703688621521, 0.33795639872550964, -0.42954239249229431, 0.43543162941932678, -0.11473512649536133, -0.22323237359523773, 0.43270546197891235, 0.25392478704452515, -0.10319361090660095, -0.37947064638137817, 0.18472854793071747, 0.32872921228408813, 0.015008239075541496, 0.051685571670532227, 0.39171060919761658, 
  0.23891192674636841, 0.095451399683952332, 0.25426393747329712, 0.15653890371322632, 0.34962195158004761, 0.1278454065322876, -0.40998554229736328, -0.088824339210987091, -0.10212042182683945, 0.047066181898117065, 0.38123065233230591, 0.07316242903470993, -0.056592784821987152, -0.40212592482566833, -0.11837765574455261, 0.35114753246307373, -0.33315008878707886, 0.25723758339881897, -0.18146216869354248, -0.32790184020996094, 
  0.16866344213485718, -0.19294296205043793, -0.13035441935062408, -0.0076735317707061768, 0.29495450854301453, 0.38615024089813232, -0.07784184068441391, 0.019767748191952705, 0.28068161010742188, -0.35648933053016663, -0.25073385238647461, 0.20367425680160522, -0.22762683033943176, -0.2070196121931076, 0.20359139144420624, -0.05775851383805275, -0.070471644401550293, 0.35346323251724243, 0.010248482227325439, 0.69082576036453247, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 10,20 } };
const ALIGN(16) float tensor_data6[3*10] = { 
  0.36968237161636353, 0.076462864875793457, 0.57208549976348877, -0.51779502630233765, -0.23708584904670715, 0.29448860883712769, 0.48275089263916016, -0.45851165056228638, -0.66210263967514038, 0.42620432376861572, 
  0.35491320490837097, 0.38633811473846436, -0.12294971942901611, -0.42723757028579712, -0.62878239154815674, 0.055912435054779053, 0.15336589515209198, -0.57423311471939087, 0.075476333498954773, -0.092691577970981598, 
  -0.5051388144493103, -0.12115943431854248, 0.66433978080749512, -0.0014030337333679199, -0.57159680128097534, -0.5093843936920166, -0.51275604963302612, -0.30909347534179688, 0.61157703399658203, 0.19273215532302856, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 3,10 } };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,3 } };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,4,2 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,5,1 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,6,3 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 108, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 40, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 80, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 12, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 2160, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 800, },
{ kTfLiteMmapRo, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 120, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension7, 80, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 40, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 48), (TfLiteIntArray*)&g0::tensor_dimension9, 12, },
{ kTfLiteArenaRw, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 12, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = kTfLiteFloat32;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization.type = kTfLiteNoQuantization;

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = kTfLiteFloat32;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
